#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventManagement.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventManagement")]
	public partial class EventManagementDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCompetitionFeature(CompetitionFeature instance);
    partial void UpdateCompetitionFeature(CompetitionFeature instance);
    partial void DeleteCompetitionFeature(CompetitionFeature instance);
    partial void InsertCompetitionNewest(CompetitionNewest instance);
    partial void UpdateCompetitionNewest(CompetitionNewest instance);
    partial void DeleteCompetitionNewest(CompetitionNewest instance);
    partial void InsertConferenceFeature(ConferenceFeature instance);
    partial void UpdateConferenceFeature(ConferenceFeature instance);
    partial void DeleteConferenceFeature(ConferenceFeature instance);
    partial void InsertConferenceNewest(ConferenceNewest instance);
    partial void UpdateConferenceNewest(ConferenceNewest instance);
    partial void DeleteConferenceNewest(ConferenceNewest instance);
    partial void InsertEventDocument(EventDocument instance);
    partial void UpdateEventDocument(EventDocument instance);
    partial void DeleteEventDocument(EventDocument instance);
    partial void InsertEventInfo(EventInfo instance);
    partial void UpdateEventInfo(EventInfo instance);
    partial void DeleteEventInfo(EventInfo instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertNavigation(Navigation instance);
    partial void UpdateNavigation(Navigation instance);
    partial void DeleteNavigation(Navigation instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertNewsFeature(NewsFeature instance);
    partial void UpdateNewsFeature(NewsFeature instance);
    partial void DeleteNewsFeature(NewsFeature instance);
    partial void InsertNewsNewest(NewsNewest instance);
    partial void UpdateNewsNewest(NewsNewest instance);
    partial void DeleteNewsNewest(NewsNewest instance);
    partial void InsertNewsType(NewsType instance);
    partial void UpdateNewsType(NewsType instance);
    partial void DeleteNewsType(NewsType instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSeminarFeature(SeminarFeature instance);
    partial void UpdateSeminarFeature(SeminarFeature instance);
    partial void DeleteSeminarFeature(SeminarFeature instance);
    partial void InsertSeminarNewest(SeminarNewest instance);
    partial void UpdateSeminarNewest(SeminarNewest instance);
    partial void DeleteSeminarNewest(SeminarNewest instance);
    partial void InsertSlider(Slider instance);
    partial void UpdateSlider(Slider instance);
    partial void DeleteSlider(Slider instance);
    partial void InsertSpeaker(Speaker instance);
    partial void UpdateSpeaker(Speaker instance);
    partial void DeleteSpeaker(Speaker instance);
    partial void InsertSpeakersAssign(SpeakersAssign instance);
    partial void UpdateSpeakersAssign(SpeakersAssign instance);
    partial void DeleteSpeakersAssign(SpeakersAssign instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertCommentLike(CommentLike instance);
    partial void UpdateCommentLike(CommentLike instance);
    partial void DeleteCommentLike(CommentLike instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    #endregion
		
		public EventManagementDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagementDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagementDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EventManagementDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ADMIN> ADMINs
		{
			get
			{
				return this.GetTable<ADMIN>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionFeature> CompetitionFeatures
		{
			get
			{
				return this.GetTable<CompetitionFeature>();
			}
		}
		
		public System.Data.Linq.Table<CompetitionNewest> CompetitionNewests
		{
			get
			{
				return this.GetTable<CompetitionNewest>();
			}
		}
		
		public System.Data.Linq.Table<ConferenceFeature> ConferenceFeatures
		{
			get
			{
				return this.GetTable<ConferenceFeature>();
			}
		}
		
		public System.Data.Linq.Table<ConferenceNewest> ConferenceNewests
		{
			get
			{
				return this.GetTable<ConferenceNewest>();
			}
		}
		
		public System.Data.Linq.Table<EventDocument> EventDocuments
		{
			get
			{
				return this.GetTable<EventDocument>();
			}
		}
		
		public System.Data.Linq.Table<EventInfo> EventInfos
		{
			get
			{
				return this.GetTable<EventInfo>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Navigation> Navigations
		{
			get
			{
				return this.GetTable<Navigation>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<NewsFeature> NewsFeatures
		{
			get
			{
				return this.GetTable<NewsFeature>();
			}
		}
		
		public System.Data.Linq.Table<NewsNewest> NewsNewests
		{
			get
			{
				return this.GetTable<NewsNewest>();
			}
		}
		
		public System.Data.Linq.Table<NewsType> NewsTypes
		{
			get
			{
				return this.GetTable<NewsType>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SeminarFeature> SeminarFeatures
		{
			get
			{
				return this.GetTable<SeminarFeature>();
			}
		}
		
		public System.Data.Linq.Table<SeminarNewest> SeminarNewests
		{
			get
			{
				return this.GetTable<SeminarNewest>();
			}
		}
		
		public System.Data.Linq.Table<Slider> Sliders
		{
			get
			{
				return this.GetTable<Slider>();
			}
		}
		
		public System.Data.Linq.Table<Speaker> Speakers
		{
			get
			{
				return this.GetTable<Speaker>();
			}
		}
		
		public System.Data.Linq.Table<SpeakersAssign> SpeakersAssigns
		{
			get
			{
				return this.GetTable<SpeakersAssign>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<CommentLike> CommentLikes
		{
			get
			{
				return this.GetTable<CommentLike>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private string _AccountName;
		
		private string _Password;
		
		private bool _IsDeleted;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Account()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_User", Storage="_Users", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private System.Nullable<int> _AccountID;
		
		private string _UserName;
		
		private string _UserEmail;
		
		private string _UserAvatar;
		
		private string _UserAddress;
		
		private string _UserPhone;
		
		private bool _IsDeleted;
		
		private EntitySet<EventInfo> _EventInfos;
		
		private EntitySet<New> _News;
		
		private EntitySet<Registration> _Registrations;
		
		private EntitySet<UserRole> _UserRoles;
		
		private EntitySet<CommentLike> _CommentLikes;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnUserAvatarChanging(string value);
    partial void OnUserAvatarChanged();
    partial void OnUserAddressChanging(string value);
    partial void OnUserAddressChanged();
    partial void OnUserPhoneChanging(string value);
    partial void OnUserPhoneChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public User()
		{
			this._EventInfos = new EntitySet<EventInfo>(new Action<EventInfo>(this.attach_EventInfos), new Action<EventInfo>(this.detach_EventInfos));
			this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			this._CommentLikes = new EntitySet<CommentLike>(new Action<CommentLike>(this.attach_CommentLikes), new Action<CommentLike>(this.detach_CommentLikes));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(255)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="NVarChar(255)")]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAvatar", DbType="NVarChar(255)")]
		public string UserAvatar
		{
			get
			{
				return this._UserAvatar;
			}
			set
			{
				if ((this._UserAvatar != value))
				{
					this.OnUserAvatarChanging(value);
					this.SendPropertyChanging();
					this._UserAvatar = value;
					this.SendPropertyChanged("UserAvatar");
					this.OnUserAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAddress", DbType="NVarChar(MAX)")]
		public string UserAddress
		{
			get
			{
				return this._UserAddress;
			}
			set
			{
				if ((this._UserAddress != value))
				{
					this.OnUserAddressChanging(value);
					this.SendPropertyChanging();
					this._UserAddress = value;
					this.SendPropertyChanged("UserAddress");
					this.OnUserAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPhone", DbType="NVarChar(10)")]
		public string UserPhone
		{
			get
			{
				return this._UserPhone;
			}
			set
			{
				if ((this._UserPhone != value))
				{
					this.OnUserPhoneChanging(value);
					this.SendPropertyChanging();
					this._UserPhone = value;
					this.SendPropertyChanged("UserPhone");
					this.OnUserPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventInfo", Storage="_EventInfos", ThisKey="UserID", OtherKey="EventCreator")]
		public EntitySet<EventInfo> EventInfos
		{
			get
			{
				return this._EventInfos;
			}
			set
			{
				this._EventInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_New", Storage="_News", ThisKey="UserID", OtherKey="NewsAuthor")]
		public EntitySet<New> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_Registrations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_UserRoles", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CommentLike", Storage="_CommentLikes", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<CommentLike> CommentLikes
		{
			get
			{
				return this._CommentLikes;
			}
			set
			{
				this._CommentLikes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_User", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CommentLikes(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CommentLikes(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ADMIN")]
	public partial class ADMIN
	{
		
		private int _AdminID;
		
		private string _AdminName;
		
		private string _AdminPassword;
		
		private bool _IsDeleted;
		
		public ADMIN()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int AdminID
		{
			get
			{
				return this._AdminID;
			}
			set
			{
				if ((this._AdminID != value))
				{
					this._AdminID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminName", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string AdminName
		{
			get
			{
				return this._AdminName;
			}
			set
			{
				if ((this._AdminName != value))
				{
					this._AdminName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminPassword", DbType="NVarChar(12) NOT NULL", CanBeNull=false)]
		public string AdminPassword
		{
			get
			{
				return this._AdminPassword;
			}
			set
			{
				if ((this._AdminPassword != value))
				{
					this._AdminPassword = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionFeatures")]
	public partial class CompetitionFeature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionID;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionIDChanging(int value);
    partial void OnCompetitionIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public CompetitionFeature()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompetitionID
		{
			get
			{
				return this._CompetitionID;
			}
			set
			{
				if ((this._CompetitionID != value))
				{
					this.OnCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionID = value;
					this.SendPropertyChanged("CompetitionID");
					this.OnCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompetitionNewest")]
	public partial class CompetitionNewest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompetitionID;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompetitionIDChanging(int value);
    partial void OnCompetitionIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public CompetitionNewest()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompetitionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompetitionID
		{
			get
			{
				return this._CompetitionID;
			}
			set
			{
				if ((this._CompetitionID != value))
				{
					this.OnCompetitionIDChanging(value);
					this.SendPropertyChanging();
					this._CompetitionID = value;
					this.SendPropertyChanged("CompetitionID");
					this.OnCompetitionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConferenceFeatures")]
	public partial class ConferenceFeature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConferenceID;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConferenceIDChanging(int value);
    partial void OnConferenceIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public ConferenceFeature()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConferenceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConferenceID
		{
			get
			{
				return this._ConferenceID;
			}
			set
			{
				if ((this._ConferenceID != value))
				{
					this.OnConferenceIDChanging(value);
					this.SendPropertyChanging();
					this._ConferenceID = value;
					this.SendPropertyChanged("ConferenceID");
					this.OnConferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConferenceNewest")]
	public partial class ConferenceNewest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ConferenceID;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConferenceIDChanging(int value);
    partial void OnConferenceIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public ConferenceNewest()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConferenceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ConferenceID
		{
			get
			{
				return this._ConferenceID;
			}
			set
			{
				if ((this._ConferenceID != value))
				{
					this.OnConferenceIDChanging(value);
					this.SendPropertyChanging();
					this._ConferenceID = value;
					this.SendPropertyChanged("ConferenceID");
					this.OnConferenceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventDocuments")]
	public partial class EventDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DocumentID;
		
		private string _DocumentTitle;
		
		private string _DocumentFilePath;
		
		private System.DateTime _DocumentDate;
		
		private System.Nullable<int> _DocumentEvent;
		
		private bool _IsDeleted;
		
		private EntityRef<EventInfo> _EventInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDocumentIDChanging(int value);
    partial void OnDocumentIDChanged();
    partial void OnDocumentTitleChanging(string value);
    partial void OnDocumentTitleChanged();
    partial void OnDocumentFilePathChanging(string value);
    partial void OnDocumentFilePathChanged();
    partial void OnDocumentDateChanging(System.DateTime value);
    partial void OnDocumentDateChanged();
    partial void OnDocumentEventChanging(System.Nullable<int> value);
    partial void OnDocumentEventChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public EventDocument()
		{
			this._EventInfo = default(EntityRef<EventInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DocumentID
		{
			get
			{
				return this._DocumentID;
			}
			set
			{
				if ((this._DocumentID != value))
				{
					this.OnDocumentIDChanging(value);
					this.SendPropertyChanging();
					this._DocumentID = value;
					this.SendPropertyChanged("DocumentID");
					this.OnDocumentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentTitle", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DocumentTitle
		{
			get
			{
				return this._DocumentTitle;
			}
			set
			{
				if ((this._DocumentTitle != value))
				{
					this.OnDocumentTitleChanging(value);
					this.SendPropertyChanging();
					this._DocumentTitle = value;
					this.SendPropertyChanged("DocumentTitle");
					this.OnDocumentTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentFilePath", DbType="NVarChar(255)")]
		public string DocumentFilePath
		{
			get
			{
				return this._DocumentFilePath;
			}
			set
			{
				if ((this._DocumentFilePath != value))
				{
					this.OnDocumentFilePathChanging(value);
					this.SendPropertyChanging();
					this._DocumentFilePath = value;
					this.SendPropertyChanged("DocumentFilePath");
					this.OnDocumentFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate", DbType="Date NOT NULL")]
		public System.DateTime DocumentDate
		{
			get
			{
				return this._DocumentDate;
			}
			set
			{
				if ((this._DocumentDate != value))
				{
					this.OnDocumentDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentDate = value;
					this.SendPropertyChanged("DocumentDate");
					this.OnDocumentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentEvent", DbType="Int")]
		public System.Nullable<int> DocumentEvent
		{
			get
			{
				return this._DocumentEvent;
			}
			set
			{
				if ((this._DocumentEvent != value))
				{
					if (this._EventInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDocumentEventChanging(value);
					this.SendPropertyChanging();
					this._DocumentEvent = value;
					this.SendPropertyChanged("DocumentEvent");
					this.OnDocumentEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_EventDocument", Storage="_EventInfo", ThisKey="DocumentEvent", OtherKey="EventID", IsForeignKey=true)]
		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo.Entity;
			}
			set
			{
				EventInfo previousValue = this._EventInfo.Entity;
				if (((previousValue != value) 
							|| (this._EventInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventInfo.Entity = null;
						previousValue.EventDocuments.Remove(this);
					}
					this._EventInfo.Entity = value;
					if ((value != null))
					{
						value.EventDocuments.Add(this);
						this._DocumentEvent = value.EventID;
					}
					else
					{
						this._DocumentEvent = default(Nullable<int>);
					}
					this.SendPropertyChanged("EventInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventInfos")]
	public partial class EventInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _EventName;
		
		private string _EventCode;
		
		private int _EventType;
		
		private string _EventDate;
		
		private string _EventRule;
		
		private int _EventParticipants;
		
		private string _EventDescription;
		
		private string _EventImage;
		
		private int _EventCreator;
		
		private System.Nullable<int> _LocationID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private bool _IsDeleted;
		
		private EntitySet<EventDocument> _EventDocuments;
		
		private EntitySet<Registration> _Registrations;
		
		private EntitySet<SpeakersAssign> _SpeakersAssigns;
		
		private EntityRef<User> _User;
		
		private EntityRef<EventType> _EventType1;
		
		private EntityRef<Location> _Location;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnEventNameChanging(string value);
    partial void OnEventNameChanged();
    partial void OnEventCodeChanging(string value);
    partial void OnEventCodeChanged();
    partial void OnEventTypeChanging(int value);
    partial void OnEventTypeChanged();
    partial void OnEventDateChanging(string value);
    partial void OnEventDateChanged();
    partial void OnEventRuleChanging(string value);
    partial void OnEventRuleChanged();
    partial void OnEventParticipantsChanging(int value);
    partial void OnEventParticipantsChanged();
    partial void OnEventDescriptionChanging(string value);
    partial void OnEventDescriptionChanged();
    partial void OnEventImageChanging(string value);
    partial void OnEventImageChanged();
    partial void OnEventCreatorChanging(int value);
    partial void OnEventCreatorChanged();
    partial void OnLocationIDChanging(System.Nullable<int> value);
    partial void OnLocationIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public EventInfo()
		{
			this._EventDocuments = new EntitySet<EventDocument>(new Action<EventDocument>(this.attach_EventDocuments), new Action<EventDocument>(this.detach_EventDocuments));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			this._SpeakersAssigns = new EntitySet<SpeakersAssign>(new Action<SpeakersAssign>(this.attach_SpeakersAssigns), new Action<SpeakersAssign>(this.detach_SpeakersAssigns));
			this._User = default(EntityRef<User>);
			this._EventType1 = default(EntityRef<EventType>);
			this._Location = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string EventName
		{
			get
			{
				return this._EventName;
			}
			set
			{
				if ((this._EventName != value))
				{
					this.OnEventNameChanging(value);
					this.SendPropertyChanging();
					this._EventName = value;
					this.SendPropertyChanged("EventName");
					this.OnEventNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="Int NOT NULL")]
		public int EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					if (this._EventType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventRule", DbType="NVarChar(MAX)")]
		public string EventRule
		{
			get
			{
				return this._EventRule;
			}
			set
			{
				if ((this._EventRule != value))
				{
					this.OnEventRuleChanging(value);
					this.SendPropertyChanging();
					this._EventRule = value;
					this.SendPropertyChanged("EventRule");
					this.OnEventRuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventParticipants", DbType="Int NOT NULL")]
		public int EventParticipants
		{
			get
			{
				return this._EventParticipants;
			}
			set
			{
				if ((this._EventParticipants != value))
				{
					this.OnEventParticipantsChanging(value);
					this.SendPropertyChanging();
					this._EventParticipants = value;
					this.SendPropertyChanged("EventParticipants");
					this.OnEventParticipantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDescription", DbType="NVarChar(MAX)")]
		public string EventDescription
		{
			get
			{
				return this._EventDescription;
			}
			set
			{
				if ((this._EventDescription != value))
				{
					this.OnEventDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EventDescription = value;
					this.SendPropertyChanged("EventDescription");
					this.OnEventDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventImage", DbType="NVarChar(MAX)")]
		public string EventImage
		{
			get
			{
				return this._EventImage;
			}
			set
			{
				if ((this._EventImage != value))
				{
					this.OnEventImageChanging(value);
					this.SendPropertyChanging();
					this._EventImage = value;
					this.SendPropertyChanged("EventImage");
					this.OnEventImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCreator", DbType="Int NOT NULL")]
		public int EventCreator
		{
			get
			{
				return this._EventCreator;
			}
			set
			{
				if ((this._EventCreator != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventCreatorChanging(value);
					this.SendPropertyChanging();
					this._EventCreator = value;
					this.SendPropertyChanged("EventCreator");
					this.OnEventCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", DbType="Int")]
		public System.Nullable<int> LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_EventDocument", Storage="_EventDocuments", ThisKey="EventID", OtherKey="DocumentEvent")]
		public EntitySet<EventDocument> EventDocuments
		{
			get
			{
				return this._EventDocuments;
			}
			set
			{
				this._EventDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_Registration", Storage="_Registrations", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_SpeakersAssign", Storage="_SpeakersAssigns", ThisKey="EventID", OtherKey="EventID")]
		public EntitySet<SpeakersAssign> SpeakersAssigns
		{
			get
			{
				return this._SpeakersAssigns;
			}
			set
			{
				this._SpeakersAssigns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventInfo", Storage="_User", ThisKey="EventCreator", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventInfos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventInfos.Add(this);
						this._EventCreator = value.UserID;
					}
					else
					{
						this._EventCreator = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_EventInfo", Storage="_EventType1", ThisKey="EventType", OtherKey="EventTypeID", IsForeignKey=true)]
		public EventType EventType1
		{
			get
			{
				return this._EventType1.Entity;
			}
			set
			{
				EventType previousValue = this._EventType1.Entity;
				if (((previousValue != value) 
							|| (this._EventType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType1.Entity = null;
						previousValue.EventInfos.Remove(this);
					}
					this._EventType1.Entity = value;
					if ((value != null))
					{
						value.EventInfos.Add(this);
						this._EventType = value.EventTypeID;
					}
					else
					{
						this._EventType = default(int);
					}
					this.SendPropertyChanged("EventType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_EventInfo", Storage="_Location", ThisKey="LocationID", OtherKey="LocationID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.EventInfos.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.EventInfos.Add(this);
						this._LocationID = value.LocationID;
					}
					else
					{
						this._LocationID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventDocuments(EventDocument entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = this;
		}
		
		private void detach_EventDocuments(EventDocument entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = null;
		}
		
		private void attach_SpeakersAssigns(SpeakersAssign entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = this;
		}
		
		private void detach_SpeakersAssigns(SpeakersAssign entity)
		{
			this.SendPropertyChanging();
			entity.EventInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTypes")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventTypeID;
		
		private string _EventTypeName;
		
		private bool _IsDeleted;
		
		private EntitySet<EventInfo> _EventInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventTypeIDChanging(int value);
    partial void OnEventTypeIDChanged();
    partial void OnEventTypeNameChanging(string value);
    partial void OnEventTypeNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public EventType()
		{
			this._EventInfos = new EntitySet<EventInfo>(new Action<EventInfo>(this.attach_EventInfos), new Action<EventInfo>(this.detach_EventInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventTypeID
		{
			get
			{
				return this._EventTypeID;
			}
			set
			{
				if ((this._EventTypeID != value))
				{
					this.OnEventTypeIDChanging(value);
					this.SendPropertyChanging();
					this._EventTypeID = value;
					this.SendPropertyChanged("EventTypeID");
					this.OnEventTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTypeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string EventTypeName
		{
			get
			{
				return this._EventTypeName;
			}
			set
			{
				if ((this._EventTypeName != value))
				{
					this.OnEventTypeNameChanging(value);
					this.SendPropertyChanging();
					this._EventTypeName = value;
					this.SendPropertyChanged("EventTypeName");
					this.OnEventTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_EventInfo", Storage="_EventInfos", ThisKey="EventTypeID", OtherKey="EventType")]
		public EntitySet<EventInfo> EventInfos
		{
			get
			{
				return this._EventInfos;
			}
			set
			{
				this._EventInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.EventType1 = this;
		}
		
		private void detach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.EventType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Locations")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LocationID;
		
		private string _LocationName;
		
		private string _LocationAddress;
		
		private int _LocationCapacity;
		
		private bool _IsDeleted;
		
		private EntitySet<EventInfo> _EventInfos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnLocationNameChanging(string value);
    partial void OnLocationNameChanged();
    partial void OnLocationAddressChanging(string value);
    partial void OnLocationAddressChanged();
    partial void OnLocationCapacityChanging(int value);
    partial void OnLocationCapacityChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Location()
		{
			this._EventInfos = new EntitySet<EventInfo>(new Action<EventInfo>(this.attach_EventInfos), new Action<EventInfo>(this.detach_EventInfos));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LocationName
		{
			get
			{
				return this._LocationName;
			}
			set
			{
				if ((this._LocationName != value))
				{
					this.OnLocationNameChanging(value);
					this.SendPropertyChanging();
					this._LocationName = value;
					this.SendPropertyChanged("LocationName");
					this.OnLocationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationAddress", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string LocationAddress
		{
			get
			{
				return this._LocationAddress;
			}
			set
			{
				if ((this._LocationAddress != value))
				{
					this.OnLocationAddressChanging(value);
					this.SendPropertyChanging();
					this._LocationAddress = value;
					this.SendPropertyChanged("LocationAddress");
					this.OnLocationAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationCapacity", DbType="Int NOT NULL")]
		public int LocationCapacity
		{
			get
			{
				return this._LocationCapacity;
			}
			set
			{
				if ((this._LocationCapacity != value))
				{
					this.OnLocationCapacityChanging(value);
					this.SendPropertyChanging();
					this._LocationCapacity = value;
					this.SendPropertyChanged("LocationCapacity");
					this.OnLocationCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_EventInfo", Storage="_EventInfos", ThisKey="LocationID", OtherKey="LocationID")]
		public EntitySet<EventInfo> EventInfos
		{
			get
			{
				return this._EventInfos;
			}
			set
			{
				this._EventInfos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_EventInfos(EventInfo entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Navigations")]
	public partial class Navigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NavID;
		
		private string _NavName;
		
		private string _NavLink;
		
		private bool _IsDeleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNavIDChanging(int value);
    partial void OnNavIDChanged();
    partial void OnNavNameChanging(string value);
    partial void OnNavNameChanged();
    partial void OnNavLinkChanging(string value);
    partial void OnNavLinkChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Navigation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NavID
		{
			get
			{
				return this._NavID;
			}
			set
			{
				if ((this._NavID != value))
				{
					this.OnNavIDChanging(value);
					this.SendPropertyChanging();
					this._NavID = value;
					this.SendPropertyChanged("NavID");
					this.OnNavIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NavName
		{
			get
			{
				return this._NavName;
			}
			set
			{
				if ((this._NavName != value))
				{
					this.OnNavNameChanging(value);
					this.SendPropertyChanging();
					this._NavName = value;
					this.SendPropertyChanged("NavName");
					this.OnNavNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavLink", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NavLink
		{
			get
			{
				return this._NavLink;
			}
			set
			{
				if ((this._NavLink != value))
				{
					this.OnNavLinkChanging(value);
					this.SendPropertyChanging();
					this._NavLink = value;
					this.SendPropertyChanged("NavLink");
					this.OnNavLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private string _NewsTitle;
		
		private string _NewsContent;
		
		private int _NewsAuthor;
		
		private System.DateTime _NewsDate;
		
		private int _NewsTypeID;
		
		private string _NewsImage;
		
		private string _NewsLink;
		
		private bool _IsDeleted;
		
		private EntityRef<NewsFeature> _NewsFeature;
		
		private EntityRef<NewsNewest> _NewsNewest;
		
		private EntitySet<Comment> _Comments;
		
		private EntityRef<User> _User;
		
		private EntityRef<NewsType> _NewsType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnNewsTitleChanging(string value);
    partial void OnNewsTitleChanged();
    partial void OnNewsContentChanging(string value);
    partial void OnNewsContentChanged();
    partial void OnNewsAuthorChanging(int value);
    partial void OnNewsAuthorChanged();
    partial void OnNewsDateChanging(System.DateTime value);
    partial void OnNewsDateChanged();
    partial void OnNewsTypeIDChanging(int value);
    partial void OnNewsTypeIDChanged();
    partial void OnNewsImageChanging(string value);
    partial void OnNewsImageChanged();
    partial void OnNewsLinkChanging(string value);
    partial void OnNewsLinkChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public New()
		{
			this._NewsFeature = default(EntityRef<NewsFeature>);
			this._NewsNewest = default(EntityRef<NewsNewest>);
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._User = default(EntityRef<User>);
			this._NewsType = default(EntityRef<NewsType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTitle", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NewsTitle
		{
			get
			{
				return this._NewsTitle;
			}
			set
			{
				if ((this._NewsTitle != value))
				{
					this.OnNewsTitleChanging(value);
					this.SendPropertyChanging();
					this._NewsTitle = value;
					this.SendPropertyChanged("NewsTitle");
					this.OnNewsTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsContent", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsContent
		{
			get
			{
				return this._NewsContent;
			}
			set
			{
				if ((this._NewsContent != value))
				{
					this.OnNewsContentChanging(value);
					this.SendPropertyChanging();
					this._NewsContent = value;
					this.SendPropertyChanged("NewsContent");
					this.OnNewsContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsAuthor", DbType="Int NOT NULL")]
		public int NewsAuthor
		{
			get
			{
				return this._NewsAuthor;
			}
			set
			{
				if ((this._NewsAuthor != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsAuthorChanging(value);
					this.SendPropertyChanging();
					this._NewsAuthor = value;
					this.SendPropertyChanged("NewsAuthor");
					this.OnNewsAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsDate", DbType="Date NOT NULL")]
		public System.DateTime NewsDate
		{
			get
			{
				return this._NewsDate;
			}
			set
			{
				if ((this._NewsDate != value))
				{
					this.OnNewsDateChanging(value);
					this.SendPropertyChanging();
					this._NewsDate = value;
					this.SendPropertyChanged("NewsDate");
					this.OnNewsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTypeID", DbType="Int NOT NULL")]
		public int NewsTypeID
		{
			get
			{
				return this._NewsTypeID;
			}
			set
			{
				if ((this._NewsTypeID != value))
				{
					if (this._NewsType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsTypeIDChanging(value);
					this.SendPropertyChanging();
					this._NewsTypeID = value;
					this.SendPropertyChanged("NewsTypeID");
					this.OnNewsTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsImage", DbType="NVarChar(MAX)")]
		public string NewsImage
		{
			get
			{
				return this._NewsImage;
			}
			set
			{
				if ((this._NewsImage != value))
				{
					this.OnNewsImageChanging(value);
					this.SendPropertyChanging();
					this._NewsImage = value;
					this.SendPropertyChanged("NewsImage");
					this.OnNewsImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsLink", DbType="NVarChar(MAX)")]
		public string NewsLink
		{
			get
			{
				return this._NewsLink;
			}
			set
			{
				if ((this._NewsLink != value))
				{
					this.OnNewsLinkChanging(value);
					this.SendPropertyChanging();
					this._NewsLink = value;
					this.SendPropertyChanged("NewsLink");
					this.OnNewsLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewsFeature", Storage="_NewsFeature", ThisKey="NewsID", OtherKey="NewsID", IsUnique=true, IsForeignKey=false)]
		public NewsFeature NewsFeature
		{
			get
			{
				return this._NewsFeature.Entity;
			}
			set
			{
				NewsFeature previousValue = this._NewsFeature.Entity;
				if (((previousValue != value) 
							|| (this._NewsFeature.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsFeature.Entity = null;
						previousValue.New = null;
					}
					this._NewsFeature.Entity = value;
					if ((value != null))
					{
						value.New = this;
					}
					this.SendPropertyChanged("NewsFeature");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewsNewest", Storage="_NewsNewest", ThisKey="NewsID", OtherKey="NewsID", IsUnique=true, IsForeignKey=false)]
		public NewsNewest NewsNewest
		{
			get
			{
				return this._NewsNewest.Entity;
			}
			set
			{
				NewsNewest previousValue = this._NewsNewest.Entity;
				if (((previousValue != value) 
							|| (this._NewsNewest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsNewest.Entity = null;
						previousValue.New = null;
					}
					this._NewsNewest.Entity = value;
					if ((value != null))
					{
						value.New = this;
					}
					this.SendPropertyChanged("NewsNewest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_Comment", Storage="_Comments", ThisKey="NewsID", OtherKey="NewsID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_New", Storage="_User", ThisKey="NewsAuthor", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.News.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._NewsAuthor = value.UserID;
					}
					else
					{
						this._NewsAuthor = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsType_New", Storage="_NewsType", ThisKey="NewsTypeID", OtherKey="NewsTypeID", IsForeignKey=true)]
		public NewsType NewsType
		{
			get
			{
				return this._NewsType.Entity;
			}
			set
			{
				NewsType previousValue = this._NewsType.Entity;
				if (((previousValue != value) 
							|| (this._NewsType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsType.Entity = null;
						previousValue.News.Remove(this);
					}
					this._NewsType.Entity = value;
					if ((value != null))
					{
						value.News.Add(this);
						this._NewsTypeID = value.NewsTypeID;
					}
					else
					{
						this._NewsTypeID = default(int);
					}
					this.SendPropertyChanged("NewsType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.New = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.New = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsFeatures")]
	public partial class NewsFeature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private int _Order;
		
		private EntityRef<New> _New;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public NewsFeature()
		{
			this._New = default(EntityRef<New>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewsFeature", Storage="_New", ThisKey="NewsID", OtherKey="NewsID", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.NewsFeature = null;
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.NewsFeature = this;
						this._NewsID = value.NewsID;
					}
					else
					{
						this._NewsID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsNewest")]
	public partial class NewsNewest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsID;
		
		private int _Order;
		
		private EntityRef<New> _New;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public NewsNewest()
		{
			this._New = default(EntityRef<New>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_NewsNewest", Storage="_New", ThisKey="NewsID", OtherKey="NewsID", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.NewsNewest = null;
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.NewsNewest = this;
						this._NewsID = value.NewsID;
					}
					else
					{
						this._NewsID = default(int);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsTypes")]
	public partial class NewsType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NewsTypeID;
		
		private string _NewsTypeName;
		
		private string _NewsTypeLink;
		
		private bool _IsDeleted;
		
		private EntitySet<New> _News;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsTypeIDChanging(int value);
    partial void OnNewsTypeIDChanged();
    partial void OnNewsTypeNameChanging(string value);
    partial void OnNewsTypeNameChanged();
    partial void OnNewsTypeLinkChanging(string value);
    partial void OnNewsTypeLinkChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public NewsType()
		{
			this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NewsTypeID
		{
			get
			{
				return this._NewsTypeID;
			}
			set
			{
				if ((this._NewsTypeID != value))
				{
					this.OnNewsTypeIDChanging(value);
					this.SendPropertyChanging();
					this._NewsTypeID = value;
					this.SendPropertyChanged("NewsTypeID");
					this.OnNewsTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NewsTypeName
		{
			get
			{
				return this._NewsTypeName;
			}
			set
			{
				if ((this._NewsTypeName != value))
				{
					this.OnNewsTypeNameChanging(value);
					this.SendPropertyChanging();
					this._NewsTypeName = value;
					this.SendPropertyChanged("NewsTypeName");
					this.OnNewsTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsTypeLink", DbType="NVarChar(MAX)")]
		public string NewsTypeLink
		{
			get
			{
				return this._NewsTypeLink;
			}
			set
			{
				if ((this._NewsTypeLink != value))
				{
					this.OnNewsTypeLinkChanging(value);
					this.SendPropertyChanging();
					this._NewsTypeLink = value;
					this.SendPropertyChanged("NewsTypeLink");
					this.OnNewsTypeLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsType_New", Storage="_News", ThisKey="NewsTypeID", OtherKey="NewsTypeID")]
		public EntitySet<New> News
		{
			get
			{
				return this._News;
			}
			set
			{
				this._News.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.NewsType = this;
		}
		
		private void detach_News(New entity)
		{
			this.SendPropertyChanging();
			entity.NewsType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registrations")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RegistrationID;
		
		private int _UserID;
		
		private int _EventID;
		
		private System.DateTime _RegistratedDate;
		
		private EntityRef<EventInfo> _EventInfo;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRegistrationIDChanging(int value);
    partial void OnRegistrationIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnRegistratedDateChanging(System.DateTime value);
    partial void OnRegistratedDateChanged();
    #endregion
		
		public Registration()
		{
			this._EventInfo = default(EntityRef<EventInfo>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RegistrationID
		{
			get
			{
				return this._RegistrationID;
			}
			set
			{
				if ((this._RegistrationID != value))
				{
					this.OnRegistrationIDChanging(value);
					this.SendPropertyChanging();
					this._RegistrationID = value;
					this.SendPropertyChanged("RegistrationID");
					this.OnRegistrationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._EventInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistratedDate", DbType="DateTime NOT NULL")]
		public System.DateTime RegistratedDate
		{
			get
			{
				return this._RegistratedDate;
			}
			set
			{
				if ((this._RegistratedDate != value))
				{
					this.OnRegistratedDateChanging(value);
					this.SendPropertyChanging();
					this._RegistratedDate = value;
					this.SendPropertyChanged("RegistratedDate");
					this.OnRegistratedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_Registration", Storage="_EventInfo", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo.Entity;
			}
			set
			{
				EventInfo previousValue = this._EventInfo.Entity;
				if (((previousValue != value) 
							|| (this._EventInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventInfo.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._EventInfo.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("EventInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _RoleDescription;
		
		private bool _IsDeleted;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Role()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(255)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDescription", DbType="NVarChar(255)")]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeminarFeatures")]
	public partial class SeminarFeature : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeminarID;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeminarIDChanging(int value);
    partial void OnSeminarIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public SeminarFeature()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeminarID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeminarID
		{
			get
			{
				return this._SeminarID;
			}
			set
			{
				if ((this._SeminarID != value))
				{
					this.OnSeminarIDChanging(value);
					this.SendPropertyChanging();
					this._SeminarID = value;
					this.SendPropertyChanged("SeminarID");
					this.OnSeminarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeminarNewest")]
	public partial class SeminarNewest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeminarID;
		
		private int _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeminarIDChanging(int value);
    partial void OnSeminarIDChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public SeminarNewest()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeminarID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SeminarID
		{
			get
			{
				return this._SeminarID;
			}
			set
			{
				if ((this._SeminarID != value))
				{
					this.OnSeminarIDChanging(value);
					this.SendPropertyChanging();
					this._SeminarID = value;
					this.SendPropertyChanged("SeminarID");
					this.OnSeminarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sliders")]
	public partial class Slider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SliderID;
		
		private string _SliderName;
		
		private string _SliderImage;
		
		private string _SliderLink;
		
		private System.Nullable<int> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSliderIDChanging(int value);
    partial void OnSliderIDChanged();
    partial void OnSliderNameChanging(string value);
    partial void OnSliderNameChanged();
    partial void OnSliderImageChanging(string value);
    partial void OnSliderImageChanged();
    partial void OnSliderLinkChanging(string value);
    partial void OnSliderLinkChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    #endregion
		
		public Slider()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SliderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SliderID
		{
			get
			{
				return this._SliderID;
			}
			set
			{
				if ((this._SliderID != value))
				{
					this.OnSliderIDChanging(value);
					this.SendPropertyChanging();
					this._SliderID = value;
					this.SendPropertyChanged("SliderID");
					this.OnSliderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SliderName", DbType="NVarChar(100)")]
		public string SliderName
		{
			get
			{
				return this._SliderName;
			}
			set
			{
				if ((this._SliderName != value))
				{
					this.OnSliderNameChanging(value);
					this.SendPropertyChanging();
					this._SliderName = value;
					this.SendPropertyChanged("SliderName");
					this.OnSliderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SliderImage", DbType="NVarChar(MAX)")]
		public string SliderImage
		{
			get
			{
				return this._SliderImage;
			}
			set
			{
				if ((this._SliderImage != value))
				{
					this.OnSliderImageChanging(value);
					this.SendPropertyChanging();
					this._SliderImage = value;
					this.SendPropertyChanged("SliderImage");
					this.OnSliderImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SliderLink", DbType="NVarChar(MAX)")]
		public string SliderLink
		{
			get
			{
				return this._SliderLink;
			}
			set
			{
				if ((this._SliderLink != value))
				{
					this.OnSliderLinkChanging(value);
					this.SendPropertyChanging();
					this._SliderLink = value;
					this.SendPropertyChanged("SliderLink");
					this.OnSliderLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Speakers")]
	public partial class Speaker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpeakerID;
		
		private string _SpeakerName;
		
		private bool _IsDeleted;
		
		private EntitySet<SpeakersAssign> _SpeakersAssigns;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpeakerIDChanging(int value);
    partial void OnSpeakerIDChanged();
    partial void OnSpeakerNameChanging(string value);
    partial void OnSpeakerNameChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Speaker()
		{
			this._SpeakersAssigns = new EntitySet<SpeakersAssign>(new Action<SpeakersAssign>(this.attach_SpeakersAssigns), new Action<SpeakersAssign>(this.detach_SpeakersAssigns));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeakerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpeakerID
		{
			get
			{
				return this._SpeakerID;
			}
			set
			{
				if ((this._SpeakerID != value))
				{
					this.OnSpeakerIDChanging(value);
					this.SendPropertyChanging();
					this._SpeakerID = value;
					this.SendPropertyChanged("SpeakerID");
					this.OnSpeakerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeakerName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string SpeakerName
		{
			get
			{
				return this._SpeakerName;
			}
			set
			{
				if ((this._SpeakerName != value))
				{
					this.OnSpeakerNameChanging(value);
					this.SendPropertyChanging();
					this._SpeakerName = value;
					this.SendPropertyChanged("SpeakerName");
					this.OnSpeakerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speaker_SpeakersAssign", Storage="_SpeakersAssigns", ThisKey="SpeakerID", OtherKey="SpeakerID")]
		public EntitySet<SpeakersAssign> SpeakersAssigns
		{
			get
			{
				return this._SpeakersAssigns;
			}
			set
			{
				this._SpeakersAssigns.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SpeakersAssigns(SpeakersAssign entity)
		{
			this.SendPropertyChanging();
			entity.Speaker = this;
		}
		
		private void detach_SpeakersAssigns(SpeakersAssign entity)
		{
			this.SendPropertyChanging();
			entity.Speaker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpeakersAssigns")]
	public partial class SpeakersAssign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpeakersAssignID;
		
		private int _SpeakerID;
		
		private int _EventID;
		
		private EntityRef<EventInfo> _EventInfo;
		
		private EntityRef<Speaker> _Speaker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpeakersAssignIDChanging(int value);
    partial void OnSpeakersAssignIDChanged();
    partial void OnSpeakerIDChanging(int value);
    partial void OnSpeakerIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    #endregion
		
		public SpeakersAssign()
		{
			this._EventInfo = default(EntityRef<EventInfo>);
			this._Speaker = default(EntityRef<Speaker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeakersAssignID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SpeakersAssignID
		{
			get
			{
				return this._SpeakersAssignID;
			}
			set
			{
				if ((this._SpeakersAssignID != value))
				{
					this.OnSpeakersAssignIDChanging(value);
					this.SendPropertyChanging();
					this._SpeakersAssignID = value;
					this.SendPropertyChanged("SpeakersAssignID");
					this.OnSpeakersAssignIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpeakerID", DbType="Int NOT NULL")]
		public int SpeakerID
		{
			get
			{
				return this._SpeakerID;
			}
			set
			{
				if ((this._SpeakerID != value))
				{
					if (this._Speaker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpeakerIDChanging(value);
					this.SendPropertyChanging();
					this._SpeakerID = value;
					this.SendPropertyChanged("SpeakerID");
					this.OnSpeakerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._EventInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventInfo_SpeakersAssign", Storage="_EventInfo", ThisKey="EventID", OtherKey="EventID", IsForeignKey=true)]
		public EventInfo EventInfo
		{
			get
			{
				return this._EventInfo.Entity;
			}
			set
			{
				EventInfo previousValue = this._EventInfo.Entity;
				if (((previousValue != value) 
							|| (this._EventInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventInfo.Entity = null;
						previousValue.SpeakersAssigns.Remove(this);
					}
					this._EventInfo.Entity = value;
					if ((value != null))
					{
						value.SpeakersAssigns.Add(this);
						this._EventID = value.EventID;
					}
					else
					{
						this._EventID = default(int);
					}
					this.SendPropertyChanged("EventInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Speaker_SpeakersAssign", Storage="_Speaker", ThisKey="SpeakerID", OtherKey="SpeakerID", IsForeignKey=true)]
		public Speaker Speaker
		{
			get
			{
				return this._Speaker.Entity;
			}
			set
			{
				Speaker previousValue = this._Speaker.Entity;
				if (((previousValue != value) 
							|| (this._Speaker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Speaker.Entity = null;
						previousValue.SpeakersAssigns.Remove(this);
					}
					this._Speaker.Entity = value;
					if ((value != null))
					{
						value.SpeakersAssigns.Add(this);
						this._SpeakerID = value.SpeakerID;
					}
					else
					{
						this._SpeakerID = default(int);
					}
					this.SendPropertyChanged("Speaker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRoleID;
		
		private int _RoleID;
		
		private int _UserID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRoleIDChanging(int value);
    partial void OnUserRoleIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRoleID
		{
			get
			{
				return this._UserRoleID;
			}
			set
			{
				if ((this._UserRoleID != value))
				{
					this.OnUserRoleIDChanging(value);
					this.SendPropertyChanging();
					this._UserRoleID = value;
					this.SendPropertyChanged("UserRoleID");
					this.OnUserRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRole", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommentLikes")]
	public partial class CommentLike : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LikeID;
		
		private System.Nullable<int> _CommentID;
		
		private System.Nullable<int> _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Comment> _Comment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLikeIDChanging(int value);
    partial void OnLikeIDChanged();
    partial void OnCommentIDChanging(System.Nullable<int> value);
    partial void OnCommentIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public CommentLike()
		{
			this._User = default(EntityRef<User>);
			this._Comment = default(EntityRef<Comment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LikeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LikeID
		{
			get
			{
				return this._LikeID;
			}
			set
			{
				if ((this._LikeID != value))
				{
					this.OnLikeIDChanging(value);
					this.SendPropertyChanging();
					this._LikeID = value;
					this.SendPropertyChanged("LikeID");
					this.OnLikeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", DbType="Int")]
		public System.Nullable<int> CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					if (this._Comment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CommentLike", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CommentLikes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CommentLikes.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_CommentLike", Storage="_Comment", ThisKey="CommentID", OtherKey="CommentID", IsForeignKey=true)]
		public Comment Comment
		{
			get
			{
				return this._Comment.Entity;
			}
			set
			{
				Comment previousValue = this._Comment.Entity;
				if (((previousValue != value) 
							|| (this._Comment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comment.Entity = null;
						previousValue.CommentLikes1.Remove(this);
					}
					this._Comment.Entity = value;
					if ((value != null))
					{
						value.CommentLikes1.Add(this);
						this._CommentID = value.CommentID;
					}
					else
					{
						this._CommentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Comment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comments")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommentID;
		
		private System.Nullable<int> _NewsID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _ParentsCommentID;
		
		private string _Content;
		
		private System.Nullable<int> _CommentLikes;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private bool _IsDeleted;
		
		private EntitySet<CommentLike> _CommentLikes1;
		
		private EntityRef<New> _New;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommentIDChanging(int value);
    partial void OnCommentIDChanged();
    partial void OnNewsIDChanging(System.Nullable<int> value);
    partial void OnNewsIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnParentsCommentIDChanging(System.Nullable<int> value);
    partial void OnParentsCommentIDChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCommentLikesChanging(System.Nullable<int> value);
    partial void OnCommentLikesChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Comment()
		{
			this._CommentLikes1 = new EntitySet<CommentLike>(new Action<CommentLike>(this.attach_CommentLikes1), new Action<CommentLike>(this.detach_CommentLikes1));
			this._New = default(EntityRef<New>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CommentID
		{
			get
			{
				return this._CommentID;
			}
			set
			{
				if ((this._CommentID != value))
				{
					this.OnCommentIDChanging(value);
					this.SendPropertyChanging();
					this._CommentID = value;
					this.SendPropertyChanged("CommentID");
					this.OnCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsID", DbType="Int")]
		public System.Nullable<int> NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					if (this._New.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentsCommentID", DbType="Int")]
		public System.Nullable<int> ParentsCommentID
		{
			get
			{
				return this._ParentsCommentID;
			}
			set
			{
				if ((this._ParentsCommentID != value))
				{
					this.OnParentsCommentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentsCommentID = value;
					this.SendPropertyChanged("ParentsCommentID");
					this.OnParentsCommentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommentLikes", DbType="Int")]
		public System.Nullable<int> CommentLikes
		{
			get
			{
				return this._CommentLikes;
			}
			set
			{
				if ((this._CommentLikes != value))
				{
					this.OnCommentLikesChanging(value);
					this.SendPropertyChanging();
					this._CommentLikes = value;
					this.SendPropertyChanged("CommentLikes");
					this.OnCommentLikesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Comment_CommentLike", Storage="_CommentLikes1", ThisKey="CommentID", OtherKey="CommentID")]
		public EntitySet<CommentLike> CommentLikes1
		{
			get
			{
				return this._CommentLikes1;
			}
			set
			{
				this._CommentLikes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="New_Comment", Storage="_New", ThisKey="NewsID", OtherKey="NewsID", IsForeignKey=true)]
		public New New
		{
			get
			{
				return this._New.Entity;
			}
			set
			{
				New previousValue = this._New.Entity;
				if (((previousValue != value) 
							|| (this._New.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._New.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._New.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._NewsID = value.NewsID;
					}
					else
					{
						this._NewsID = default(Nullable<int>);
					}
					this.SendPropertyChanged("New");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CommentLikes1(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.Comment = this;
		}
		
		private void detach_CommentLikes1(CommentLike entity)
		{
			this.SendPropertyChanging();
			entity.Comment = null;
		}
	}
}
#pragma warning restore 1591
